{"version":3,"sources":["componentes/AddCategory.js","helpers/getGifs.js","componentes/GifGridItem.js","componentes/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","imagenes","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iNAkCeA,MA/Bf,YAA2C,IAAnBC,EAAkB,EAAlBA,cAEpB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCcLO,EAZK,SAAC,GAAwB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAI/B,OAFAc,QAAQC,IAAIf,GAGR,sBAAKgB,UAAU,yCAAf,UACG,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,4BAAKA,QCqBDS,EA1BC,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAId,ECLwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAW,WACP1B,EAAQC,GAAU0B,MACd,SAAAC,GAAI,OAAIH,EAAS,CACbjB,KAAMoB,EACNL,SAAS,SAGlB,CAACtB,IAEGuB,EDX4BK,CAAc5B,GAApC6B,EAAb,EAAQtB,KAAee,EAAvB,EAAuBA,QAEvB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDlB,IAEnDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEhB,qBAAKA,UAAU,YAAf,SAEIW,EAASpB,KAAK,SAAEC,GAAF,OACV,cAAC,EAAD,eAESA,GADCA,EAAIC,aEUfmB,EA1BM,WAEjB,MAAoC5C,mBAAS,CAAC,WAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ8C,EAAWtB,KAAK,SAAAT,GAAQ,OAChB,cAAC,EAAD,CAEIA,SAAWA,GADLA,YCZtCgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.966308a5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from \"prop-types\";\n\nfunction AddCategory( { setCategories } ) {\n\n    const [inputValue, setInputValue] = useState(\"\");\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n            setCategories(cats => [inputValue, ...cats ] );\n            setInputValue(\"\");\n        }\n    };\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","export const getGifs = async ( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=sjqCLzC7BFJM8xRAGgcZAM89Z5aJXYzC`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    return gifs;\n}","import React from 'react'\n\nconst GifGridItem = ( { id, title, url} ) => {\n\n    console.log(url)\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n           <img src={ url } alt={ title } />\n           <p>{ title }</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({category}) => {\n\n    //const [images, setImages] = useState([]);\n\n    const { data:imagenes, loading } = useFetchGifs( category );\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n        \n        <div className=\"card-grid\">\n        {\n            imagenes.map( ( img ) => (\n                <GifGridItem\n                    key={ img.id } \n                    { ...img }\n                />\n            ))\n        }\n        </div>\n        </>\n    )\n}\n\nexport default GifGrid\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true,\n    });\n\n    useEffect( () => {\n        getGifs(category).then(\n            imgs => setState({\n                data: imgs,\n                loading: false,\n            })\n        );\n    }, [category]);\n\n    return state;\n}\n\n","import { useState } from \"react\";\nimport AddCategory from \"./componentes/AddCategory\";\nimport GifGrid from \"./componentes/GifGrid\";\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState([\"Marvel\"]);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }></AddCategory>\n            <hr/>\n            <ol>\n                {\n                    categories.map( category => (\n                            <GifGrid \n                                key={ category }\n                                category={ category }\n                            />\n                    ))\n                }\n            </ol>\n            \n        </>\n    )\n}\n\n\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from \"./GifExpertApp\"\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}